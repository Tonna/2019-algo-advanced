* RMQ, segment tree
  :PROPERTIES:
  :CREATED:  [2019-03-18 Mon 11:57]
  :CUSTOM_ID: 2635d27e-1e3c-4ca7-a3c0-cc8a9a1a1129
  :END:

RMQ N^3 (?)

https://www.geeksforgeeks.org/wp-content/uploads/rmqSimple-1.png

#+BEGIN_SRC python :results output
def findMin(a, l, r):
  #print(l,r)
  if l > r :
    raise Exception("aaa l=%d <= r=%d" % (l,r))
  if l == r or l == (r - 1):
    return a[l]
  return min(findMin(a, l, r - 1), a[r - 1])

def rmq(a):
  out = []
  outIndex = []
  for i in range(0,len(a)):
    out.append([])
    outIndex.append([])
    for j in range(0,len(a)):
      out[i].append("__")
      outIndex[i].append("_-")
  for i in range(0, len(a)):
    for j in range(i, len(a) ):
      #print((a,i,j))
      out[i][j] = "%2.d" % findMin(a,i,j + 1)
      outIndex[i][j] = "%2.d" % a.index(findMin(a,i,j + 1), i)
  print(a)
  print()

  print("     ", end="")
  for i in range(0, len(a)):
    print(i, end="     ")
  print()
  for i in range(0, len(out)):
    print(i, out[i])
  print("\nindexes\n")

  print("     ", end="")
  for i in range(0, len(a)):
    print(i, end="     ")
  print()
  for i in range(0, len(outIndex)):
    print(i, outIndex[i])

list = [7,2,3,0,5,10,3,12,18]

rmq(list)
#+END_SRC

#+RESULTS:
#+begin_example
[7, 2, 3, 0, 5, 10, 3, 12, 18]

     0     1     2     3     4     5     6     7     8
0 [' 7', ' 2', ' 2', ' 0', ' 0', ' 0', ' 0', ' 0', ' 0']
1 ['__', ' 2', ' 2', ' 0', ' 0', ' 0', ' 0', ' 0', ' 0']
2 ['__', '__', ' 3', ' 0', ' 0', ' 0', ' 0', ' 0', ' 0']
3 ['__', '__', '__', ' 0', ' 0', ' 0', ' 0', ' 0', ' 0']
4 ['__', '__', '__', '__', ' 5', ' 5', ' 3', ' 3', ' 3']
5 ['__', '__', '__', '__', '__', '10', ' 3', ' 3', ' 3']
6 ['__', '__', '__', '__', '__', '__', ' 3', ' 3', ' 3']
7 ['__', '__', '__', '__', '__', '__', '__', '12', '12']
8 ['__', '__', '__', '__', '__', '__', '__', '__', '18']

indexes

     0     1     2     3     4     5     6     7     8
0 [' 0', ' 1', ' 1', ' 3', ' 3', ' 3', ' 3', ' 3', ' 3']
1 ['_-', ' 1', ' 1', ' 3', ' 3', ' 3', ' 3', ' 3', ' 3']
2 ['_-', '_-', ' 2', ' 3', ' 3', ' 3', ' 3', ' 3', ' 3']
3 ['_-', '_-', '_-', ' 3', ' 3', ' 3', ' 3', ' 3', ' 3']
4 ['_-', '_-', '_-', '_-', ' 4', ' 4', ' 6', ' 6', ' 6']
5 ['_-', '_-', '_-', '_-', '_-', ' 5', ' 6', ' 6', ' 6']
6 ['_-', '_-', '_-', '_-', '_-', '_-', ' 6', ' 6', ' 6']
7 ['_-', '_-', '_-', '_-', '_-', '_-', '_-', ' 7', ' 7']
8 ['_-', '_-', '_-', '_-', '_-', '_-', '_-', '_-', ' 8']
#+end_example

#+begin_src python :results output
import math

a = [2,4,3,1,6,7,8,5]

def sparseTree(arr):
  k = math.ceil(math.log2(len(arr)))
  def get_min(a,b):
    if arr[a[2]] < arr[b[2]]:
      return (a[0],b[1],a[2])
    else:
      return (a[0],b[1],b[2])
  tree = []
  for i in range(0,k+1):
    tree.append([])
    if i == 0:
      for j in range(0,len(arr)):
        tree[i].append((j,j,j))
      continue
    for j in range(0, len(tree[i-1]),2):
      if j+1 == len(tree[i-1]):
        tree[i].append(tree[i-1][j])
        break
      tree[i].append(get_min(tree[i-1][j],tree[i-1][j+1]))
  for i in reversed(tree):
    print(i)

sparseTree(a)
#+end_src

#+RESULTS:
: [(0, 7, 3)]
: [(0, 3, 3), (4, 7, 7)]
: [(0, 1, 0), (2, 3, 3), (4, 5, 4), (6, 7, 7)]
: [(0, 0, 0), (1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6), (7, 7, 7)]
